#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <signal.h>
#include <termios.h>
#include <stdio.h>
#include <sensor_msgs/LaserScan.h>
#include <tf/transform_datatypes.h>
#include <vector>
#include <nav_msgs/Odometry.h>

#define KEYCODE_R 0x43
#define KEYCODE_L 0x44
#define KEYCODE_U 0x41
#define KEYCODE_D 0x42
#define KEYCODE_Q 0x71
#define ROW 236
#define COLUMN 216
#define angle_increment 0.00436736317351
#define SOGLIA 0.3
#define ANGULAR_V 0.5
#define LINEAR_V 0.5

class teleop_stage
{
public:
  teleop_stage();
  void keyLoop();

private:

  ros::NodeHandle nh_;
  double linear_, angular_, l_scale_, a_scale_;
  ros::Publisher twist_pub_;
  ros::Subscriber sensor_distance, read_position;
  
};

//Global Variable
bool movement = true;
bool check = false;
double robot_pose_x = 0;
double robot_pose_y = 0;
double robot_pose_orientation = 0;

//x creare la mappa

bool mappa[ROW][COLUMN];
bool mappa_vertici[ROW][COLUMN];



void salvaMappa(const char *destinazione, bool b){
	FILE *fp;
	fp = fopen(destinazione, "w");
	if (fp == NULL) {
	printf("errore apertura file.\n");
		return ;
	}
	fputs("P5 236 216 255 ", fp);
	for (int j=COLUMN-1;j>=0;j--){
		for (int i=ROW-1;i>=0;i--){
			unsigned char temp;
			if (b) {
				temp = mappa_vertici[i][j] ? 0 : 255; 		
			} else {
				temp = mappa[i][j] ? 0 : 255; 
			}
			//if ((int)round(fabs(4*robot_pose_x)) == i && (int)round(fabs(4*robot_pose_y)) == j)
				//temp = 255;
			//temp = mappa[(int)round(fabs(2*robot_pose_x))][(int)round(fabs(2*robot_pose_y))] ? 0 : 127;
			fwrite(&temp, sizeof(unsigned char), 1, fp);
		}
	}
	fclose(fp);
}

void aggiornaMappa(std::vector<float> ranges) {
	float fo_x, fo_y;
	for (int i=0;i<1080;i++) {
		fo_x = robot_pose_x + ranges[i]*cos((i*angle_increment-3*M_PI/4) + robot_pose_orientation);
		fo_y = robot_pose_y + ranges[i]*sin((i*angle_increment-3*M_PI/4) + robot_pose_orientation);
		
		int temp1,temp2;
		temp1 = (int)round(fabs(4*fo_x));
		temp2 = (int)round(fabs(4*fo_y));
		mappa[temp1][temp2] = true;
		/*mappa[temp1-1][temp2] = true;
		mappa[temp1+1][temp2] = true;
		mappa[temp1][temp2-1] = true;
		mappa[temp1][temp2+1] = true;
		mappa[temp1-1][temp2-1] = true;
		mappa[temp1-1][temp2+1] = true;
		mappa[temp1+1][temp2-1] = true;
		mappa[temp1+1][temp2+1] = true;*/
	}
}

void laserCallBack(const sensor_msgs::LaserScan::ConstPtr& scan)
{
 	aggiornaMappa(scan->ranges);
	salvaMappa("/home/tonish/Desktop/mappa.pgm", false);
	check = false;
  
}

// callback di pose per prendere le posizioni del robot
void subPose(const nav_msgs::Odometry::ConstPtr& pos)
{
	// setto le posizioni iniziali del robot 
	robot_pose_x = pos->pose.pose.position.x;
	robot_pose_y = pos->pose.pose.position.y;
	robot_pose_orientation = tf::getYaw(pos->pose.pose.orientation);	

}

teleop_stage::teleop_stage():
  linear_(0),
  angular_(0),
  l_scale_(2.0),
  a_scale_(2.0)
{
  nh_.param("scale_angular", a_scale_, a_scale_);
  nh_.param("scale_linear", l_scale_, l_scale_);

  twist_pub_ = nh_.advertise<geometry_msgs::Twist>("/cmd_vel", 1);

 // sensor_distance = nh_.subscribe("/base_scan", 10, laserCallBack);
}

int kfd = 0;
struct termios cooked, raw;

void quit(int sig)
{
  tcsetattr(kfd, TCSANOW, &cooked);
  ros::shutdown();
  exit(0);
}


int main(int argc, char** argv)
{
  ros::init(argc, argv, "teleop_stage");
  teleop_stage teleopStage;
  ros::NodeHandle n;
  
  ros::Subscriber read_position;
  
  	read_position = n.subscribe("/base_pose_ground_truth", 10, subPose);

  signal(SIGINT,quit);

  teleopStage.keyLoop();
  
  return(0);
}


void teleop_stage::keyLoop()
{
  char c;
  bool dirty=false;


  // get the console in raw mode
  tcgetattr(kfd, &cooked);
  memcpy(&raw, &cooked, sizeof(struct termios));
  raw.c_lflag &=~ (ICANON | ECHO);
  // Setting a new line, then end of file
  raw.c_cc[VEOL] = 1;
  raw.c_cc[VEOF] = 2;
  tcsetattr(kfd, TCSANOW, &raw);

  puts("Reading from keyboard");
  puts("---------------------------");
  puts("Use arrow keys to move the robot.");
  
  for(;;)
  {
  	read_position.~Subscriber();
    ros::spinOnce();
    // get the next event from the keyboard
    if(read(kfd, &c, 1) < 0)
    {
      perror("read():");
      exit(-1);
    }

    linear_=angular_=0;
    ROS_DEBUG("value: 0x%02X\n", c);
  
    switch(c)
    {
      case KEYCODE_L:
        ROS_DEBUG("LEFT");
        angular_ = 1.0;
        dirty = true;
        break;
      case KEYCODE_R:
        ROS_DEBUG("RIGHT");
        angular_ = -1.0;
        dirty = true;
        break;
      case KEYCODE_U:
        ROS_DEBUG("UP");
	if (movement)
           linear_ = 1.0;
        dirty = true;
        break;
      case KEYCODE_D:
        ROS_DEBUG("DOWN");
        linear_ = -1.0;
        dirty = true;
        break;
      case KEYCODE_Q:
      	printf("MAPPO\n");
      	check = true;
      	sensor_distance = nh_.subscribe("/base_scan", 10, laserCallBack);
      	while(check) {
      		ros::spinOnce();
      	}
      	sensor_distance.~Subscriber();
      	//dirty = true;
		break;
        
    }
   

    geometry_msgs::Twist twist;
    twist.angular.z = a_scale_*angular_;
    twist.linear.x = l_scale_*linear_;
    if(dirty ==true)
    {
      twist_pub_.publish(twist);
      dirty=false;
    }
  }


  return;
}
